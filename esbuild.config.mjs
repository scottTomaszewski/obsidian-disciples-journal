import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Ensure ESV.json exists and is copied to the output directory
const esvJsonPath = path.resolve("./src/ESV.json");
const destDir = "./";

// Make sure we have the ESV.json file (legacy format)
if (fs.existsSync(esvJsonPath)) {
	console.log("ESV.json found, including in build");
	// Create the directory if it doesn't exist
	fs.mkdirSync(path.dirname(path.resolve(destDir, "src/ESV.json")), { recursive: true });
	// Copy the file
	fs.copyFileSync(esvJsonPath, path.resolve(destDir, "src/ESV.json"));
} else {
	console.error("ESV.json not found at:", esvJsonPath);
}

// Check for ESV chapter JSON files in the data directory
const esvDataDir = path.resolve("./src/data/esv");
const destDataDir = path.resolve(destDir, "src/data/esv");

if (fs.existsSync(esvDataDir)) {
	console.log("ESV chapter data directory found, including in build");
	// Create the destination directory if it doesn't exist
	fs.mkdirSync(destDataDir, { recursive: true });
	
	// Copy all JSON files from the data directory
	try {
		const files = fs.readdirSync(esvDataDir);
		let copyCount = 0;
		
		for (const file of files) {
			if (file.endsWith('.json')) {
				fs.copyFileSync(
					path.resolve(esvDataDir, file),
					path.resolve(destDataDir, file)
				);
				copyCount++;
			}
		}
		
		console.log(`Copied ${copyCount} ESV chapter JSON files`);
	} catch (error) {
		console.error("Error copying ESV chapter files:", error);
	}
} else {
	console.log("No ESV chapter data directory found at:", esvDataDir);
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	loader: { ".json": "json" },
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
